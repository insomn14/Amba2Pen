import requests
import argparse
import warnings
from urllib3.exceptions import NotOpenSSLWarning

# Ignore the NotOpenSSLWarning
warnings.simplefilter("ignore", NotOpenSSLWarning)

def convert_raw_http_to_requests(file_path, conn, custom_headers):
    with open(file_path, 'r') as file:
        raw_request = file.readlines()

    # Extract the request line (method, URL, and HTTP version)
    request_line = raw_request[0].strip()
    method, url, _ = request_line.split()

    # Extract the headers
    headers = {}
    for line in raw_request[1:]:
        line = line.strip()
        if line == '':
            break
        key, value = line.split(':', 1)
        headers[key.strip()] = value.strip()

    # Update headers with custom headers
    headers.update(custom_headers)

    # Extract the body if it exists
    body = None
    if '\n\n' in raw_request:
        body = '\n\n'.join(raw_request.split('\n\n')[1:]).strip()

    # Full URL
    full_url = conn + headers['Host'] + url

    # Prepare the requests method call
    if method == 'GET':
        response = requests.get(full_url, headers=headers)
    elif method == 'POST':
        response = requests.post(full_url, headers=headers, data=body)
    elif method == 'PUT':
        response = requests.put(full_url, headers=headers, data=body)
    elif method == 'DELETE':
        response = requests.delete(full_url, headers=headers)
    else:
        raise ValueError(f"HTTP method {method} is not supported in this script")

    return response

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert a raw HTTP request to a Python requests call")
    parser.add_argument('file_path', type=str, help="Path to the file containing the raw HTTP request")
    parser.add_argument('--unsecure', action='store_true', help="Use HTTP instead of HTTPS")
    parser.add_argument('--header', action='append', help="Custom header in the form key:value. Can be used multiple times.")

    args = parser.parse_args()
    file_path = args.file_path
    conn = "http://" if args.unsecure else "https://"

    # Parse custom headers
    custom_headers = {}
    if args.header:
        for header in args.header:
            key, value = header.split(':', 1)
            custom_headers[key.strip()] = value.strip()

    response = convert_raw_http_to_requests(file_path, conn, custom_headers)

    print(f"Status Code: {response.status_code}")
    print(f"Response Text: {response.text}")
